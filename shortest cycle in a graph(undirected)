class Solution {
public:
    int ans = INT_MAX;
    void dfs(int node, int parent, vector<bool>&vis, vector<vector<int>>&adj,  unordered_map<int, int>&mp){
        vis[node] = 1;
         
         for(auto child : adj[node]){
             if(child != parent && !vis[child]){
                 mp[child] = mp[node] + 1;
                 dfs(child, node, vis, adj, mp);
             }
             else if(child != parent && vis[child] == 1){
                 ans = min(ans,abs(mp[node] - mp[child]) + 1);
             }
         }
        
    }


    int findShortestCycle(int n, vector<vector<int>>& edges) {
        if( n == 0)
        return -1;
        vector<vector<int>>adj(n);

        for(auto it : edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
    
   
    for(int i = 0; i<n; i++){
           vector<bool>vis(n);
           if(!vis[i]){
                
               unordered_map<int, int>mp;
                mp[i] = 1;
               dfs(i, -1, vis, adj, mp);

           }
    }
    if( ans == INT_MAX)
    return -1;
    return ans;


    }
};
