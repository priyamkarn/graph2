void dfs(int i, int n, vector<int> &vis, vector<int> adj[n]){
        vis[i]=1;
        for(auto u : adj[i]){
            if(!vis[u])
                dfs(u,n,vis,adj);
        }
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        //if there are k components in a disconnected graph,
        // then we need at least k - 1 edges to connect every component.
         if(connections.size() < n - 1)
            return -1;
        vector<int> adj[n];
        vector<int> vis(n,0);
        for(int i=0;i<connections.size();i++){
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);    
        }
        int c=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                dfs(i, n, vis, adj);
                c++;
            }
        }
            return c-1;
    }
2.count total ultimate parent
ans=ultimate parent-1
class Solution {
    vector<int>parent;
    int find(int x) {
        return (parent[x] == x) ? x : find(parent[x]);
    }
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        
        int c = connections.size();
        if (n-1 > c) return -1;
        
        parent.resize(n);
        for (int i = 0; i < n; i++)
            parent[i] = i;
        
        for (int i = 0; i < c; i++) {
            int x = find(connections[i][0]);
            int y = find(connections[i][1]);
            if (x != y) parent[y] = x;
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++)
            if (parent[i] == i)
                ans++;
        
        return ans-1;
    }
};
