class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int, int>> adj[n+1];
        for(auto e:times)
        {
            adj[e[0]].push_back(make_pair(e[1],e[2]));
        }
        queue<pair<int,int>>q;
        q.push(make_pair(k,0));
        vector<int>dis(n+1,1e9);
        dis[k]=0;
        while(!q.empty())
        {
            int node=q.front().first;
            int curr_weight=q.front().second;
            q.pop();
            for(auto it:adj[node])
            {
                int adjnode=it.first;
                int adjweight=it.second;
                if(dis[adjnode]>curr_weight+adjweight)
                {
                    
                    dis[adjnode]=curr_weight+adjweight;
                    q.push(make_pair(adjnode,dis[adjnode]));
                }
            }
        }
        int res=0;
        for(int i=1;i<=n;i++)
        {
            if(dis[i]==1e9)
                return -1;
            res=max(res,dis[i]);
        }
        return res;
        }
};
