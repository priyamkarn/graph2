#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <climits>

using namespace std;

const int N = 100005;
vector<pair<int, int>> adj[N];
bool visited[N];
int dist[N];

void prim(int start) {
    for (int i = 0; i < N; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
    }
    dist[start] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int cur = pq.top().second;
        pq.pop();
        if (visited[cur]) continue;
        visited[cur] = true;

        for (int i = 0; i < adj[cur].size(); i++) {
            int next = adj[cur][i].first, weight = adj[cur][i].second;
            if (!visited[next] && dist[next] > weight) {
                dist[next] = weight;
                pq.push({dist[next], next});
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    while (m--) {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }

    int start;
    cin >> start;
    prim(start);

    for (int i = 1; i <= n; i++) {
        cout << dist[i] << " ";
    }
    cout << endl;

    return 0;
}
