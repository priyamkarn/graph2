bool dfs(vector<vector<int>>& graph,vector<int> &colors, vector<int> &res, int i) {
        colors[i] = 1;
        
        for (auto neighbor : graph[i]) {
            if(colors[neighbor] == 1) return true;
            if(colors[neighbor] == 0) {
                if (dfs(graph, colors, res,neighbor)) return true;
            }
        }
        
        colors[i] = 2;
        res.push_back(i);
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>>graph(numCourses);
        vector<int>color(numCourses,0);
        vector<int>res;
        for(auto pre:prerequisites)
        {
            graph[pre[0]].push_back(pre[1]);
        }
        for(int i=0;i<numCourses;i++)
        {
            if(!color[i])
            {
                if (dfs(graph, color, res, i)) return false;
            }
        }
        return true;
    }
