class Solution
{
	public:
	int parent[100005];
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
	int find(int x) {
    if (parent[x] == x) return x;
    return parent[x] = find(parent[x]);
}
void merge(int x, int y) {
    int px = find(x), py = find(y);
    parent[px] = py;
}
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<pair<int, pair<int, int>>> edges;
         int ans = 0;

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < adj[i].size(); j++) {
            int v = adj[i][j][0], w = adj[i][j][1];
            edges.push_back({w, {i, v}});
        }
    }
//Next, the function sorts the edges of the graph in increasing order of weight and initializes
//the parent array for the disjoint set data structure.
    sort(edges.begin(), edges.end());
    for (int i = 0; i < V; i++) parent[i] = i;

    for (int i = 0; i < edges.size(); i++) {
        int x = edges[i].second.first, y = edges[i].second.second, w = edges[i].first;
        if (find(x) != find(y)) {
            merge(x, y);
            ans += w;
        }
    }

    return ans;
    }
};
